class LLoaderProtected extends HTMLElement{static get observedAttributes(){return["files","endpoint"]}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.loadProtectedScripts()}async loadProtectedScripts(){const e=(this.getAttribute("files")||"").split(",").map(e=>e.trim()),t=this.getAttribute("endpoint")||"",o=t.replace(/\/js\/.*$/,"/token/");try{const r=await fetch(o);if(!r.ok)throw new Error("Token request failed");const{token:n}=await r.json();for(const a of e){const e=`${t}${a}?token=${n}`,o=await fetch(e,{headers:{"ngrok-skip-browser-warning":"true"}});if(!o.ok)throw new Error(`Failed to fetch ${a}`);const r=await o.text(),c=document.createElement("script");c.textContent=r,document.head.appendChild(c)}}catch(r){console.warn("üîÅ Switching to fallback due to:",r.message);for(const t of e){const e=document.createElement("script");e.src=`/luminomorphism/fallback/${t.replace(".js",".min.js")}`,document.head.appendChild(e)}}}}
customElements.define("l-loader-protected",LLoaderProtected);