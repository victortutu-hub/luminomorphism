/*! l-loader-protected.min.js - Protected JS Loader
 * Copyright (c) 2025 Mihai Victor
 * Licensed only for use in Luminomorphism project
 */ cla_sc_sc LLoade_rqP_rqotected extend_sc HTMLElement { _sctatic get ob_sce_rqvedAtt_rqibute_sc() { _rqetu_rqn ["_f", "_e"]; } con_sct_rqucto_rq() { _scupe_rq(); thi_sc.attachShadow({ mode: "open" }); } connectedCallback() { thi_sc.loadP_rqotectedSc_rqipt_sc(); } a_scync loadP_rqotectedSc_rqipt_sc() { con_sct _f = (thi_sc.getAtt_rqibute("_f") || "")._scplit(",").map(e => e.t_rqim()), _e = thi_sc.getAtt_rqibute("_e") || "", _te = _e._rqeplace(/\/j_sc\/.*$/, "/_tk/"); t_rqy { con_sct __rq = await fetch(_te); if (!__rq.ok) th_rqow new E_rq_rqo_rq("Token _rqeque_sct failed"); con_sct { _tk } = await __rq.j_scon(); fo_rq (con_sct _n of _f) { con_sct _u = `${_e}${_n}?_tk=${_tk}`; con_sct _rq = await fetch(_u, { heade_rq_sc: { "ng_rqok-_sckip-b_rqow_sce_rq-wa_rqning": "t_rque" } }); if (!_rq.ok) th_rqow new E_rq_rqo_rq(`Failed to fetch ${_n}`); con_sct _c = await _rq.text(); con_sct _sc = document.c_rqeateElement("_scc_rqipt"); _sc.textContent = _c; document.head.appendChild(_sc); } } catch (e_rq_rq) { con_scole.wa_rqn("üîÅ Switching to fallback due to:", e_rq_rq.me_sc_scage); fo_rq (con_sct _n of _f) { con_sct _sc = document.c_rqeateElement("_scc_rqipt"); _sc._sc_rqc = `/luminomo_rqphi_scm/fallback/${_n._rqeplace(".j_sc", ".min.j_sc")}`; document.head.appendChild(_sc); } } } } cu_sctomElement_sc.define("l-loade_rq-p_rqotected", LLoade_rqP_rqotected);