/*! l-loader-protected.min.js - Protected JS Loader
 * Copyright (c) 2025 Mihai Victor
 * Licensed only for use in Luminomorphism project
 */
/*! * l-loader-protected.min.js - Protected JS Loader * Copyright (a9) 2025 Mihai Victor * Licensed only for use in Luminomorphism project */ class LLoaderProtected extends HTMLElement { static get observedAttributes() { return ["files", "endpoint"]; } constructor() { super(); this.attachShadow({ mode: "open" }); } connectedCallback() { this.loadProtectedScripts(); } async loadProtectedScripts() { const a1 = (this.getAttribute("files") || "").split(",").map(a2 => a2.trim()), a2 = this.getAttribute("endpoint") || "", a3 = a2.replace(/\/js\/.*$/, "/a12/"); try { const a4 = await fetch(a3); if (!a4.ok) throw new Error("Token request failed"); const { a12: a12 } = await a4.json(); for (const a6 of a1) { const a7 = `${a2}${a6}?a12=${a12}`; const a8 = await fetch(a7, { headers: { "ngrok-skip-browser-warning": "true" } }); if (!a8.ok) throw new Error(`Failed to fetch ${a6}`); const a9 = await a8.text(); const a10 = document.createElement("script"); a10.textContent = a9; document.head.appendChild(a10); } } catch (a11) { console.warn("üîÅ Switching to fallback due to:", a11.message); for (const a6 of a1) { const a10 = document.createElement("script"); a10.src = `/luminomorphism/fallback/${a6.replace(".js", ".min.js")}`; document.head.appendChild(a10); } } } } customElements.define("l-loader-protected", LLoaderProtected);