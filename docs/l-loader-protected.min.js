/*! * l-loader-protected.min.js ‚Äì Protected JS Loader * Copyright (c) 2025 Mihai Victor * Licensed only for use in Luminomorphism project */ class LLoaderProtected extends HTMLElement { static get observedAttributes() { return ["files", "endpoint"]; } constructor() { super(); this.attachShadow({ mode: "open" }); } connectedCallback() { this.loadProtectedScripts(); } async loadProtectedScripts() { const files = (this.getAttribute("files") || "").split(",").map(e => e.trim()), endpoint = this.getAttribute("endpoint") || "", tokenEndpoint = endpoint.replace(/\/js\/.*$/, "/token/"); try { const res = await fetch(tokenEndpoint); if (!res.ok) throw new Error("Token request failed"); const { token } = await res.json(); for (const name of files) { const url = `${endpoint}${name}?token=${token}`; const r = await fetch(url, { headers: { "ngrok-skip-browser-warning": "true" } }); if (!r.ok) throw new Error(`Failed to fetch ${name}`); const content = await r.text(); const s = document.createElement("script"); s.textContent = content; document.head.appendChild(s); } } catch (err) { console.warn("üîÅ Switching to fallback due to:", err.message); for (const name of files) { const s = document.createElement("script"); s.src = `/luminomorphism/fallback/${name.replace(".js", ".min.js")}`; document.head.appendChild(s); } } } } customElements.define("l-loader-protected", LLoaderProtected);