class LOrbitalQuantum extends HTMLElement{static get observedAttributes(){return["count","color","radius","mode","quantum-delay","quantum-entropy"]}constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this._quantumInterval=null,this._orbs=[],this._rotator=null}connectedCallback(){this.render()}attributeChangedCallback(t,e,n){e!==n&&this.render()}clearQuantumInterval(){this._quantumInterval&&(clearInterval(this._quantumInterval),this._quantumInterval=null)}render(){const t=Math.max(1,parseInt(this.getAttribute("count"))||5),e=this.getAttribute("color")||"#00ffff",n=parseInt(this.getAttribute("radius"))||40,a=this.getAttribute("mode"),r=parseInt(this.getAttribute("quantum-delay"))||3e3,s=parseFloat(this.getAttribute("quantum-entropy"))||1.5;this.clearQuantumInterval(),this.shadow.innerHTML="",this._orbs=[];const o=document.createElement("div");o.className="orbital-wrapper";const i=document.createElement("div");i.className="orbital-center";const l=document.createElement("div");l.className="rotator",this._rotator=l;const h=document.createElement("style");h.textContent=`\n      .orbital-wrapper {\n        position: relative;\n        width: 100%; height: 100%;\n        min-height: 200px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        pointer-events: none;\n        z-index: 2;\n      }\n      .orbital-center {\n        position: relative;\n        width: 200px; height: 200px;\n      }\n      .rotator {\n        width: 100%; height: 100%;\n        position: absolute;\n        top: 0; left: 0;\n        animation: rotateOrbit 6s linear infinite;\n        transform-origin: center center;\n      }\n      .orb {\n        position: absolute;\n        left: 50%; top: 50%;\n        transform: translate(0px, 0px);\n      }\n      .orb-inner {\n        width: 6px; height: 6px;\n        margin-left: -3px; margin-top: -3px;\n        border-radius: 50%;\n        background: ${e};\n        box-shadow: 0 0 6px ${e};\n        animation: pulseOrb 2s infinite ease-in-out;\n      }\n      @keyframes rotateOrbit {\n        from { transform: rotate(0deg); }\n        to   { transform: rotate(360deg); }\n      }\n      @keyframes pulseOrb {\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.3); }\n      }\n    `;for(let e=0;e<t;e++){const a=document.createElement("div");a.className="orb";const r=document.createElement("div");r.className="orb-inner",a.appendChild(r),this._orbs.push(a);const s=360/t*e,o=s*Math.PI/180,i=Math.sin(o)*n,h=-Math.cos(o)*n;a.style.transform=`translate(${i}px, ${h}px)`,a.dataset.baseAngle=s,l.appendChild(a)}i.appendChild(l),o.appendChild(i),this.shadow.appendChild(h),this.shadow.appendChild(o),"quantum"===a&&(this._quantumInterval=setInterval(()=>{if(!this._orbs.length)return;const t=this._orbs[Math.floor(Math.random()*this._orbs.length)],a=this._orbs[Math.floor(Math.random()*this._orbs.length)],r=t.querySelector(".orb-inner"),o=a.querySelector(".orb-inner");t.style.transition="opacity 0.3s, transform 0.3s",t.style.opacity="0",setTimeout(()=>{const a=360*Math.random()*s,o=a*Math.PI/180,i=Math.sin(o)*n,l=-Math.cos(o)*n;t.style.transform=`translate(${i}px, ${l}px)`,t.dataset.baseAngle=a,t.style.opacity="1",r.style.boxShadow=`0 0 15px ${e}`,setTimeout(()=>{r.style.boxShadow=`0 0 6px ${e}`},500)},300),o.style.transition="filter 0.3s",o.style.filter="brightness(1.8)",setTimeout(()=>o.style.filter="brightness(1)",500)},r))}disconnectedCallback(){this.clearQuantumInterval()}}customElements.define("l-orbital-quantum",LOrbitalQuantum);