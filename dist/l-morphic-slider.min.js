class LMorphicSlider extends HTMLElement{static get observedAttributes(){return["value","min","max","step","disabled","color","track-deform","trail-enabled","magnetic-strength","glow-intensity","orientation","label"]}constructor(){super(),this.attachShadow({mode:"open"}),this.config={value:50,min:0,max:100,step:1,disabled:!1,color:"#00ffff",trackDeform:!0,trailEnabled:!0,magneticStrength:.3,glowIntensity:1,orientation:"horizontal",label:""},this.state={isDragging:!1,mouseX:0,mouseY:0,thumbPosition:0,trackDeformation:{points:[],intensity:0},trail:[]},this.elements={},this.animationId=null,this.trailCleanupTimeout=null,this.cleanup=[]}connectedCallback(){this.parseAttributes(),this.render(),this.initializeElements(),this.attachEventListeners(),this.updateSlider(),this.startAnimation()}disconnectedCallback(){this.stopAnimation(),this.cleanup.forEach(t=>t())}attributeChangedCallback(t,e,i){e!==i&&(this.parseAttributes(),this.updateSlider(),t==="color"&&this.updateColors())}parseAttributes(){this.config.value=parseFloat(this.getAttribute("value"))||50,this.config.min=parseFloat(this.getAttribute("min"))||0,this.config.max=parseFloat(this.getAttribute("max"))||100,this.config.step=parseFloat(this.getAttribute("step"))||1,this.config.disabled=this.hasAttribute("disabled"),this.config.color=this.getAttribute("color")||"#00ffff",this.config.trackDeform=this.getAttribute("track-deform")!=="false",this.config.trailEnabled=this.getAttribute("trail-enabled")!=="false",this.config.magneticStrength=parseFloat(this.getAttribute("magnetic-strength"))||.3,this.config.glowIntensity=parseFloat(this.getAttribute("glow-intensity"))||1,this.config.orientation=this.getAttribute("orientation")||"horizontal",this.config.label=this.getAttribute("label")||""}render(){const{color:t,orientation:e,label:i,disabled:n}=this.config,s=e==="vertical";this.shadowRoot.innerHTML=`
      <style>
        :host {
          display: inline-block;
          width: ${s?"60px":"300px"};
          height: ${s?"300px":"60px"};
          position: relative;
          cursor: ${n?"not-allowed":"pointer"};
          opacity: ${n?"0.5":"1"};
          user-select: none;
        }
        
        .slider-container {
          width: 100%;
          height: 100%;
          position: relative;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-direction: ${s?"column":"row"};
        }
        
        .slider-label {
          position: absolute;
          ${s?"bottom: -25px":"top: -25px"};
          left: 50%;
          transform: translateX(-50%);
          font-size: 0.8rem;
          color: ${t};
          font-weight: 500;
          opacity: 0.8;
        }
        
        .track-container {
          position: relative;
          width: ${s?"8px":"100%"};
          height: ${s?"100%":"8px"};
          background: rgba(255,255,255,0.1);
          border-radius: 4px;
          overflow: visible;
        }
        
        .track-svg {
          position: absolute;
          top: -10px;
          left: -10px;
          width: calc(100% + 20px);
          height: calc(100% + 20px);
          pointer-events: none;
          z-index: 1;
        }
        
        .track-path {
          fill: none;
          stroke: rgba(255,255,255,0.1);
          stroke-width: 8;
          transition: stroke 0.3s ease;
        }
        
        .track-active {
          fill: none;
          stroke: ${t};
          stroke-width: 8;
          filter: drop-shadow(0 0 6px ${t}40);
          transition: all 0.3s ease;
        }
        
        .thumb {
          position: absolute;
          width: 20px;
          height: 20px;
          background: linear-gradient(135deg, ${t}, ${t}cc);
          border: 2px solid #fff;
          border-radius: 50%;
          cursor: ${n?"not-allowed":"grab"};
          z-index: 10;
          transition: all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
          box-shadow: 
            0 4px 12px rgba(0,0,0,0.3),
            0 0 20px ${t}60,
            inset 0 1px 1px rgba(255,255,255,0.2);
        }
        
        .thumb:hover {
          transform: scale(1.1);
          box-shadow: 
            0 6px 20px rgba(0,0,0,0.4),
            0 0 30px ${t}80,
            inset 0 1px 1px rgba(255,255,255,0.3);
        }
        
        .thumb.dragging {
          transform: scale(1.2);
          cursor: grabbing;
          box-shadow: 
            0 8px 25px rgba(0,0,0,0.5),
            0 0 40px ${t},
            inset 0 1px 1px rgba(255,255,255,0.4);
        }
        
        .trail-particle {
          position: absolute;
          width: 4px;
          height: 4px;
          background: ${t};
          border-radius: 50%;
          pointer-events: none;
          z-index: 5;
          animation: trail-fade 1s ease-out forwards;
        }
        
        .value-display {
          position: absolute;
          ${s?"right: -50px":"bottom: -30px"};
          ${s?"top: 50%":"left: 50%"};
          transform: ${s?"translateY(-50%)":"translateX(-50%)"};
          font-size: 0.9rem;
          color: ${t};
          font-weight: 600;
          background: rgba(0,0,0,0.7);
          padding: 4px 8px;
          border-radius: 12px;
          border: 1px solid ${t}40;
          backdrop-filter: blur(4px);
          opacity: 0;
          transition: opacity 0.3s ease;
        }
        
        .value-display.show {
          opacity: 1;
        }
        
        .magnetic-indicator {
          position: absolute;
          width: 8px;
          height: 8px;
          background: ${t};
          border-radius: 50%;
          opacity: 0;
          pointer-events: none;
          z-index: 3;
          box-shadow: 0 0 15px ${t};
          animation: magnetic-pulse 1s ease-in-out infinite;
        }
        
        @keyframes trail-fade {
          0% { 
            opacity: 0.8; 
            transform: scale(1); 
          }
          100% { 
            opacity: 0; 
            transform: scale(0.3); 
          }
        }
        
        @keyframes magnetic-pulse {
          0%, 100% { 
            transform: scale(1); 
            opacity: 0.6; 
          }
          50% { 
            transform: scale(1.5); 
            opacity: 0.2; 
          }
        }
        
        /* Vertical orientation adjustments */
        .vertical .track-container {
          width: 8px;
          height: 100%;
        }
        
        /* Accessibility */
        :host(:focus-within) .track-active {
          stroke-width: 10;
          filter: drop-shadow(0 0 8px ${t}60);
        }
        
        /* Disabled state */
        :host([disabled]) .thumb {
          cursor: not-allowed;
          filter: grayscale(1);
        }
        
        :host([disabled]) .track-active {
          filter: grayscale(1);
        }
      </style>
      
      <div class="slider-container ${e}">
        ${i?`<div class="slider-label">${i}</div>`:""}
        
        <div class="track-container" id="trackContainer">
          <svg class="track-svg" id="trackSvg" viewBox="0 0 100 100" preserveAspectRatio="none">
            <path class="track-path" id="trackPath"></path>
            <path class="track-active" id="trackActive"></path>
          </svg>
          
          <div class="thumb" id="thumb"></div>
          <div class="magnetic-indicator" id="magneticIndicator"></div>
        </div>
        
        <div class="value-display" id="valueDisplay">${Math.round(this.config.value)}</div>
      </div>
    `}initializeElements(){this.elements={container:this.shadowRoot.querySelector(".slider-container"),trackContainer:this.shadowRoot.getElementById("trackContainer"),trackSvg:this.shadowRoot.getElementById("trackSvg"),trackPath:this.shadowRoot.getElementById("trackPath"),trackActive:this.shadowRoot.getElementById("trackActive"),thumb:this.shadowRoot.getElementById("thumb"),magneticIndicator:this.shadowRoot.getElementById("magneticIndicator"),valueDisplay:this.shadowRoot.getElementById("valueDisplay")}}attachEventListeners(){const{trackContainer:t,thumb:e}=this.elements,i=a=>this.handleMouseDown(a),n=a=>this.handleMouseMove(a),s=a=>this.handleMouseUp(a),l=a=>this.handleTouchStart(a),o=a=>this.handleTouchMove(a),r=a=>this.handleTouchEnd(a),c=a=>this.handleKeyDown(a);t.addEventListener("mousedown",i),t.addEventListener("mousemove",a=>{this.config.disabled||this.updateMagneticEffect(a)}),t.addEventListener("mouseleave",()=>this.clearMagneticEffect()),e.addEventListener("mousedown",i),e.addEventListener("touchstart",l,{passive:!1}),e.addEventListener("keydown",c),e.setAttribute("tabindex","0"),document.addEventListener("mousemove",n),document.addEventListener("mouseup",s),document.addEventListener("touchmove",o,{passive:!1}),document.addEventListener("touchend",r),this.cleanup.push(()=>{t.removeEventListener("mousedown",i),e.removeEventListener("mousedown",i),e.removeEventListener("touchstart",l),e.removeEventListener("keydown",c),document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",s),document.removeEventListener("touchmove",o),document.removeEventListener("touchend",r)})}handleMouseDown(t){this.config.disabled||(t.preventDefault(),this.state.isDragging=!0,this.elements.thumb.classList.add("dragging"),this.elements.valueDisplay.classList.add("show"),(t.target===this.elements.trackContainer||t.target.closest(".track-svg"))&&this.updateValueFromEvent(t),this.dispatchEvent(new CustomEvent("slide-start",{detail:{value:this.config.value}})))}handleMouseMove(t){this.state.isDragging&&(this.updateValueFromEvent(t),this.createTrailParticle())}handleMouseUp(t){this.state.isDragging&&(this.state.isDragging=!1,this.elements.thumb.classList.remove("dragging"),this.elements.valueDisplay.classList.remove("show"),this.dispatchEvent(new CustomEvent("slide-end",{detail:{value:this.config.value}})))}handleTouchStart(t){if(this.config.disabled)return;t.preventDefault();const e=t.touches[0];this.handleMouseDown(e)}handleTouchMove(t){if(!this.state.isDragging)return;t.preventDefault();const e=t.touches[0];this.handleMouseMove(e)}handleTouchEnd(t){this.handleMouseUp(t)}handleKeyDown(t){if(this.config.disabled)return;const{min:e,max:i,step:n}=this.config;let s=this.config.value;switch(t.key){case"ArrowRight":case"ArrowUp":s=Math.min(i,this.config.value+n);break;case"ArrowLeft":case"ArrowDown":s=Math.max(e,this.config.value-n);break;case"Home":s=e;break;case"End":s=i;break;default:return}t.preventDefault(),this.setValue(s),this.createTrailParticle()}updateValueFromEvent(t){const e=this.elements.trackContainer.getBoundingClientRect(),{min:i,max:n,step:s,orientation:l}=this.config;let o;l==="vertical"?o=1-(t.clientY-e.top)/e.height:o=(t.clientX-e.left)/e.width,o=Math.max(0,Math.min(1,o));let r=i+o*(n-i);s>0&&(r=Math.round(r/s)*s),this.setValue(r)}updateMagneticEffect(t){if(!this.config.trackDeform)return;const e=this.elements.trackContainer.getBoundingClientRect();this.state.mouseX=t.clientX-e.left,this.state.mouseY=t.clientY-e.top;const i=this.elements.magneticIndicator;i.style.left=`${this.state.mouseX-4}px`,i.style.top=`${this.state.mouseY-4}px`,i.style.opacity="0.6"}clearMagneticEffect(){this.elements.magneticIndicator.style.opacity="0",this.state.trackDeformation.intensity=0}createTrailParticle(){if(!this.config.trailEnabled)return;const t=this.elements.thumb.getBoundingClientRect(),e=this.elements.trackContainer.getBoundingClientRect(),i=document.createElement("div");i.className="trail-particle",i.style.left=`${t.left-e.left+8}px`,i.style.top=`${t.top-e.top+8}px`,this.elements.trackContainer.appendChild(i),setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},1e3)}updateSlider(){const{value:t,min:e,max:i,orientation:n}=this.config,s=(t-e)/(i-e);n==="vertical"?(this.elements.thumb.style.bottom=`${s*100}%`,this.elements.thumb.style.left="50%",this.elements.thumb.style.transform="translate(-50%, 50%)"):(this.elements.thumb.style.left=`${s*100}%`,this.elements.thumb.style.top="50%",this.elements.thumb.style.transform="translate(-50%, -50%)"),this.updateTrackPaths(s),this.elements.valueDisplay.textContent=Math.round(t),this.dispatchEvent(new CustomEvent("change",{detail:{value:this.config.value}}))}updateTrackPaths(t){const{trackDeform:e}=this.config,i=this.elements.trackContainer.getBoundingClientRect();if(e&&this.state.mouseX&&this.state.mouseY){const n=i.height/2,s=Math.abs(this.state.mouseY-n),o=Math.max(0,15-s*.5),r=10,c=i.width-10,a=i.height/2+10,h=a+(this.state.mouseY<n?-o:o),d=`M ${r} ${a} Q ${this.state.mouseX+10} ${h} ${c} ${a}`,u=`M ${r} ${a} Q ${this.state.mouseX+10} ${h} ${r+(c-r)*t} ${a+(h-a)*(t*2)}`;this.elements.trackPath.setAttribute("d",d),this.elements.trackActive.setAttribute("d",u)}else this.elements.trackPath.setAttribute("d","M 10 50 L 90 50"),this.elements.trackActive.setAttribute("d",`M 10 50 L ${10+80*t} 50`)}updateColors(){const{color:t}=this.config;this.render(),this.initializeElements(),this.attachEventListeners(),this.updateSlider()}startAnimation(){const t=()=>{this.config.trackDeform&&this.updateTrackPaths((this.config.value-this.config.min)/(this.config.max-this.config.min)),this.animationId=requestAnimationFrame(t)};t()}stopAnimation(){this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null),this.trailCleanupTimeout&&clearTimeout(this.trailCleanupTimeout)}setValue(t){const{min:e,max:i,step:n}=this.config;t=Math.max(e,Math.min(i,t)),n>0&&(t=Math.round(t/n)*n),this.config.value=t,this.setAttribute("value",t),this.updateSlider()}getValue(){return this.config.value}enable(){this.config.disabled=!1,this.removeAttribute("disabled"),this.style.opacity="1",this.style.cursor="pointer"}disable(){this.config.disabled=!0,this.setAttribute("disabled",""),this.style.opacity="0.5",this.style.cursor="not-allowed"}reset(){const t=(this.config.min+this.config.max)/2;this.setValue(t)}}customElements.define("l-morphic-slider",LMorphicSlider);
