class m extends HTMLElement{static get observedAttributes(){return["magnetic","flip-enabled","glow-color","depth","attraction-strength","hover-lift","click-effect"]}constructor(){super(),this.attachShadow({mode:"open"}),this.state={isHovered:!1,isFlipped:!1,isPressed:!1,mouseX:0,mouseY:0},this.config={magnetic:!0,flipEnabled:!1,glowColor:"#00ffff",depth:1,attractionStrength:.3,hoverLift:10,clickEffect:!0},this.eventListeners=[],this.animationFrameId=null,this.ripples=[]}connectedCallback(){this.parseAttributes(),this.render(),this.attachEventListeners()}disconnectedCallback(){this.cleanup()}attributeChangedCallback(t,e,s){e!==s&&(this.parseAttributes(),this.updateStyles())}parseAttributes(){this.config.magnetic=this.getAttribute("magnetic")!=="false",this.config.flipEnabled=this.getAttribute("flip-enabled")==="true",this.config.glowColor=this.getAttribute("glow-color")||"#00ffff",this.config.depth=parseFloat(this.getAttribute("depth"))||1,this.config.attractionStrength=parseFloat(this.getAttribute("attraction-strength"))||.3,this.config.hoverLift=parseFloat(this.getAttribute("hover-lift"))||10,this.config.clickEffect=this.getAttribute("click-effect")!=="false"}render(){const{glowColor:t,flipEnabled:e}=this.config;this.shadowRoot.innerHTML=`
      <style>
        :host {
          display: block;
          perspective: 1000px;
          cursor: pointer;
        }
        
        .card-container {
          position: relative;
          width: 100%;
          height: 100%;
          min-height: 200px;
          transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
          transform-style: preserve-3d;
          border-radius: 16px;
        }
        
        .card-face {
          position: absolute;
          width: 100%;
          height: 100%;
          border-radius: 16px;
          background: linear-gradient(135deg, 
            rgba(255,255,255,0.1) 0%, 
            rgba(255,255,255,0.05) 50%,
            rgba(255,255,255,0.02) 100%);
          border: 1px solid rgba(255,255,255,0.1);
          backdrop-filter: blur(20px);
          overflow: hidden;
          backface-visibility: hidden;
          box-shadow: 
            0 8px 32px rgba(0,0,0,0.3),
            inset 0 1px 1px rgba(255,255,255,0.1);
        }
        
        .card-front {
          transform: rotateY(0deg);
        }
        
        .card-back {
          transform: rotateY(180deg);
          display: ${e?"block":"none"};
        }
        
        .card-content {
          position: relative;
          padding: 24px;
          height: 100%;
          z-index: 2;
        }
        
        .glow-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          opacity: 0;
          pointer-events: none;
          border-radius: 16px;
          transition: opacity 0.3s ease;
          z-index: 1;
        }
        
        .magnetic-indicator {
          position: absolute;
          width: 6px;
          height: 6px;
          background: ${t};
          border-radius: 50%;
          opacity: 0;
          transition: all 0.2s ease;
          box-shadow: 0 0 10px ${t};
          z-index: 3;
        }
        
        .ripple {
          position: absolute;
          border-radius: 50%;
          background: radial-gradient(circle, ${t}40 0%, transparent 70%);
          pointer-events: none;
          z-index: 1;
          animation: ripple-expand 0.8s ease-out forwards;
        }
        
        @keyframes ripple-expand {
          0% {
            transform: scale(0);
            opacity: 0.6;
          }
          100% {
            transform: scale(4);
            opacity: 0;
          }
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
          .card-content {
            padding: 16px;
          }
        }
      </style>
      
      <div class="card-container" id="cardContainer">
        <div class="card-face card-front" id="cardFront">
          <div class="glow-overlay" id="glowOverlay"></div>
          <div class="magnetic-indicator" id="magneticIndicator"></div>
          <div class="card-content">
            <slot name="front">
              <h3>Card Title</h3>
              <p>Default front content</p>
            </slot>
          </div>
        </div>
        
        <div class="card-face card-back" id="cardBack">
          <div class="glow-overlay"></div>
          <div class="card-content">
            <slot name="back">
              <h3>Back Side</h3>
              <p>Default back content</p>
            </slot>
          </div>
        </div>
      </div>
    `}attachEventListeners(){const t=this.shadowRoot.getElementById("cardContainer");Object.entries({mouseenter:i=>this.handleMouseEnter(i),mouseleave:i=>this.handleMouseLeave(i),mousemove:i=>this.handleMouseMove(i),click:i=>this.handleClick(i),mousedown:i=>this.handleMouseDown(i),mouseup:i=>this.handleMouseUp(i)}).forEach(([i,a])=>{t.addEventListener(i,a),this.eventListeners.push({element:t,event:i,handler:a})});const s=i=>this.handleMouseUp(i);document.addEventListener("mouseup",s),this.eventListeners.push({element:document,event:"mouseup",handler:s})}handleMouseEnter(t){this.state.isHovered=!0,this.updateCardAppearance(),this.showMagneticIndicator(),this.dispatchEvent(new CustomEvent("card-hover",{detail:{hovered:!0}}))}handleMouseLeave(t){this.state.isHovered=!1,this.state.mouseX=0,this.state.mouseY=0,this.updateCardAppearance(),this.hideMagneticIndicator(),this.dispatchEvent(new CustomEvent("card-hover",{detail:{hovered:!1}}))}handleMouseMove(t){if(!this.state.isHovered)return;const e=this.getBoundingClientRect();this.state.mouseX=(t.clientX-e.left-e.width/2)/e.width,this.state.mouseY=(t.clientY-e.top-e.height/2)/e.height,this.updateCardAppearance(),this.updateMagneticIndicator(t.clientX-e.left,t.clientY-e.top),this.updateGlowEffect(t.clientX-e.left,t.clientY-e.top)}handleClick(t){this.config.flipEnabled&&this.flip(),this.config.clickEffect&&this.createClickRipple(t),this.dispatchEvent(new CustomEvent("card-click",{detail:{flipped:this.state.isFlipped,mouseX:this.state.mouseX,mouseY:this.state.mouseY}}))}handleMouseDown(t){this.state.isPressed=!0,this.updateCardAppearance()}handleMouseUp(t){this.state.isPressed=!1,this.updateCardAppearance()}updateCardAppearance(){const t=this.shadowRoot.getElementById("cardContainer"),{magnetic:e,attractionStrength:s,hoverLift:i,depth:a}=this.config,{isHovered:c,isPressed:l,mouseX:n,mouseY:r}=this.state;let o="",d="0 8px 32px rgba(0,0,0,0.3)";if(c){if(e){const p=n*s*20,f=r*s*20,g=r*-10*a,u=n*10*a;o+=`translate3d(${p}px, ${f-i}px, 0) `,o+=`rotateX(${g}deg) rotateY(${u}deg) `}else o+=`translateZ(${i}px) `;const h=(Math.abs(n)+Math.abs(r))*.5+.5;d=`
        0 ${20+i}px ${60+i*2}px rgba(0,0,0,${.4*h}),
        0 0 30px ${this.config.glowColor}33,
        inset 0 1px 1px rgba(255,255,255,0.2)
      `}l&&(o+="scale(0.98) ",d="0 4px 16px rgba(0,0,0,0.4)"),this.state.isFlipped&&(o+="rotateY(180deg) "),t.style.transform=o,t.style.boxShadow=d}showMagneticIndicator(){const t=this.shadowRoot.getElementById("magneticIndicator");this.config.magnetic&&(t.style.opacity="0.7")}hideMagneticIndicator(){const t=this.shadowRoot.getElementById("magneticIndicator");t.style.opacity="0"}updateMagneticIndicator(t,e){const s=this.shadowRoot.getElementById("magneticIndicator");this.config.magnetic&&(s.style.left=`${t-3}px`,s.style.top=`${e-3}px`)}updateGlowEffect(t,e){const s=this.shadowRoot.getElementById("glowOverlay"),i=this.state.isHovered?.3:0;s.style.opacity=i,s.style.background=`
      radial-gradient(circle 150px at ${t}px ${e}px, 
        ${this.config.glowColor}20 0%, 
        ${this.config.glowColor}10 40%,
        transparent 70%)
    `}createClickRipple(t){const e=this.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top,a=document.createElement("div");a.className="ripple",a.style.left=`${s-25}px`,a.style.top=`${i-25}px`,a.style.width="50px",a.style.height="50px",this.shadowRoot.getElementById("cardFront").appendChild(a),setTimeout(()=>{a.parentNode&&a.parentNode.removeChild(a)},800)}flip(){this.state.isFlipped=!this.state.isFlipped,this.updateCardAppearance(),this.dispatchEvent(new CustomEvent("card-flip",{detail:{flipped:this.state.isFlipped}}))}updateStyles(){["glow-color","flip-enabled"].some(e=>this.getAttribute(e)!==this.config[e.replace("-","")])&&(this.render(),this.attachEventListeners())}reset(){this.state.isFlipped=!1,this.state.isHovered=!1,this.state.isPressed=!1,this.updateCardAppearance()}forceFlip(){this.config.flipEnabled&&this.flip()}cleanup(){this.animationFrameId&&cancelAnimationFrame(this.animationFrameId),this.eventListeners.forEach(({element:t,event:e,handler:s})=>{t.removeEventListener(e,s)}),this.eventListeners=[],this.ripples=[]}}customElements.define("l-morphic-card",m);
//# sourceMappingURL=l-morphic-card.min.js.map
